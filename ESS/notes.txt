#controle de qualidade 
testar o sistema: escrever codigo (testes) que irão avaliar o sistema

review artifacts : outro desenvolvedor analisar o que foi feito antes de jogar no repositório.

pair programming : 2 pessoas trabalhando numa maquina nó, enquanto um programa, o outro verifica se dá tudo certo e, se necessário, dá suas opiniões.

pair programming e review artifacts sao 2 abordagens para barrar sujeira.

reduzir technical debt:
debito tecnico : codigo sujo (gambiarra) 

#specificacao requisitos

sintaticamente correto para ser executado pelo cucumber depois.

#custos

tamanho da equipe e o custo dela dado um período de tempo.

######################################

16/09

JSON :
{
	nome, idade, numseioq
}

tags:
elementos graficos, textfield, button, label, table, list.

porque commits frequentes: dando commit a cada pequena mudança fica, caso ocorra algum erro, fica mais facil identificar, qual
mudança causou o erro.

#########################
30/09
pra que criar um modulo de serviço?

porque nao nos interessa cada aluno guardar um array de aluno
mas uma lista de alunos compartilhar um array de alunos,
para isso criamos um SERVIDOR que vai compartilhar a informacao
com todos os usuarios

passando parametros para o servidor:
/alunos?nome=pedro

let é difrerente de var como?
let cria uma variavel local, aonde nao pode ser usado novamente

07/10
queremos agora enviar uma requisicao pro servidor
######################################################
10/09

^ -> começo da string
$ indica o final da string

/^asdsadda$/

browser.get("asdsda") ->o mesmo que digitar sadsada no browser.

await -> só va adiante se o browser responder (sincrono).

await$ -> existe algum atributo 'a' no qual o name = 'alunos'?, entao é nele mesmo que quero clicar
$ -> query
a -> aquele <a hajkdhasjkd> no codigo html tipo:
<a name = "alunos" routerLink...</a>

"(\d*)" casa com async(cpf)

element.all -> ele pega todos os elemenots 

('cpflist') -> todos os elementos html cujo nome é cpflist 

retorna um array de <td>'s nesse caso.

.to.evantually.equal(0) -> no caso, nao enconhar NENHUM aluno com o mesmo cpf
ele procura uma lista de alunos com aquele mesmo cpf, verificando se o length da lista é zero (achou ninguem).

Promise<String> -> feito obsevable, mas só retorna 1 elemto ao inves de uma lista;

p.then(asdsad) -> somento se a promessa for cumprida, executa sadsadsa

When: 
[^\"]* -> uma sequencia de caracteres menos ".
só tem ação nesse When.

Then -> pelo nome e cpf se to.eventually.equal(1).











                           


